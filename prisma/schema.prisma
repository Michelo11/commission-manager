generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Project       Project[]
}

model VerificationToken {
  identifier String
  token      String   @id @map("_id")
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  category String
  owner    User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String   @db.ObjectId
  review   Review[]
}

model Review {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String  @unique @db.ObjectId
  description String
  rating      Int
}
